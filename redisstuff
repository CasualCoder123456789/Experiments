from flask import Flask, render_template, request, redirect, url_for, session
from werkzeug.utils import secure_filename
import os
from flask_cors import CORS
import config
from flask_session import Session
import logging
import fakeredis

# Use FakeStrictRedis for strict Redis-like behavior
redis_client = fakeredis.FakeStrictRedis()


from gevent import monkey
monkey.patch_all()

global session_id
session_id = ""

global llm_id
llm_id = ""

app = Flask(__name__, static_folder='static', template_folder='templates')

CORS(app)

#redis_client = redis.StrictRedis(host='localhost', port=6379, db=0, decode_responses=True)

app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SESSION_TYPE'] = 'redis'
app.config['SESSION_REDIS'] = redis_client#redis.StrictRedis(host='localhost', port=6379, db=0)
app.config['SESSION_PERMANENT'] = False
app.config['SESSION_USE_SIGNER'] = True

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

logger.debug(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'flask_session'))

if not os.path.exists(app.config['SESSION_FILE_DIR']):
    os.makedirs(app.config['SESSION_FILE_DIR'])

Session(app)

@config.socketio.on('llm')
def handle_llm(data):
    llm_id = request.sid
    redis_client.set('llm_id', llm_id)
    print(llm_id)

room=redis_client.get('llm_id')

from flask_socketio import SocketIO, emit

socketio = None

def makeSocketio(app):
    socketio = SocketIO(app,debug=False,cors_allowed_origins='*',async_mode='gevent', manage_session=True, message_queue='redis://localhost:6379/0'
